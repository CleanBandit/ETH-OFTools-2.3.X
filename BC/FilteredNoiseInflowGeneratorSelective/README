This variant of the filtered noise inflow generator uses the proposed method of selective filtering. It also uses a parallel implementation of the getRandomField function, which generates the random number field for each timestep.

Selective filtering only filters the virtual grid coordinates which are nearest to actual mesh faces. This can heavily improve performance for grids that have several refinements in vertical direction (z-axis). 

In order to use this inlet generator with OpenFOAM:

0. Compile this boundary condition with the command wmake.

1. Include this in your controldict:
  libs
  (
      "libfilteredNoiseInflowGeneratorSelective.so"
  );

2. Call the inlet generator from your velocity boundary condition for your inlet:
  inlet
    {
        type            filteredNoiseInflowGeneratorSelective;
        value           uniform ( 0 0 0 ); // placeholder
        //perturb 1e-6; //optional: used for the interpolation. Change this value if there are artifacts on the inlet patch
        correlationShape gaussian; // other correlationShapes are exp or doubleExp
        //Virtual grid has the size of the smalles inlet patch cell.
        gridFactor 2; //optional: Use the gridFactor to scale the virtual grid size.
    }

3. Make sure you include a directory constant/boundaryData/<nameOfInletPatch>/ which contains the files for R, L and ref. An example case is found at: https://github.com/ETH-BuildingPhysics/ETH-OFTools-2.3.X/tree/master/Tutorials/FilteredNoiseInflowGenerator
