/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      sampleDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Set output format : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
//      vtk
//      ensight
//      csv
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      ensight     : Ensight Gold format, one field per case file
//      foamFile    : separate points, faces and values file
//      dx          : DX scalar or vector format
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//
// Note:
// other formats such as obj, stl, etc can also be written (by proxy)
// but without any values!
surfaceFormat foamFile;

// optionally define extra controls for the output formats
formatOptions
{
    ensight
    {
        format  ascii;
    }
}

// interpolationScheme. choice of
//      cell          : use cell-centre value only; constant over cells
//                      (default)
//      cellPoint     : use cell-centre and vertex values
//      cellPointFace : use cell-centre, vertex and face values.
//      pointMVC      : use point values only (Mean Value Coordinates)
//      cellPatchConstrained : like 'cell' but uses cell-centre except on
//                             boundary faces where it uses the boundary value.
//                             For use with e.g. patchCloudSet.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPointFace;

// Fields to sample.
fields
(
    U
);

// Set sampling definition: choice of
//      uniform             evenly distributed points on line
//      face                one point per face intersection
//      midPoint            one point per cell, inbetween two face intersections
//      midPointAndFace     combination of face and midPoint
//
//      polyLine            specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//      triSurfaceMeshPointSet  points of triSurface
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      uniform, face, midPoint, midPointAndFace : start and end coordinate
//      uniform: extra number of sampling points
//      polyLine, cloud: list of coordinates
//      patchCloud: list of coordinates and set of patches to look for nearest
//      patchSeed: random sampling on set of patches. Points slightly off
//                 face centre.
sets
(
    linec31-cpf
    {
        type    uniform;
        axis    xyz;
        start   ( 2.0 -0.3 0.0 );
        end     ( 2.0 -0.3 0.6 );
        nPoints 100;
    }
    line31asPoint-cpf
    {
        type    cloud;
        axis    xyz;
        points
        (
            ( 2.0 -0.3 0.0 )
            ( 2.0 -0.3 0.0125 )
            ( 2.0 -0.3 0.025 )
            ( 2.0 -0.3 0.0375 )
            ( 2.0 -0.3 0.05 )
            ( 2.0 -0.3 0.0625 )
            ( 2.0 -0.3 0.075 )
            ( 2.0 -0.3 0.0875 )
            ( 2.0 -0.3 0.1 )
            ( 2.0 -0.3 0.1125 )
            ( 2.0 -0.3 0.125 )
            ( 2.0 -0.3 0.1375 )
            ( 2.0 -0.3 0.15 )
            ( 2.0 -0.3 0.1625 )
            ( 2.0 -0.3 0.175 )
            ( 2.0 -0.3 0.1875 )
            ( 2.0 -0.3 0.2 )
            ( 2.0 -0.3 0.2125 )
            ( 2.0 -0.3 0.225 )
            ( 2.0 -0.3 0.2375 )
            ( 2.0 -0.3 0.25 )
            ( 2.0 -0.3 0.2625 )
            ( 2.0 -0.3 0.275 )
            ( 2.0 -0.3 0.2875 )
            ( 2.0 -0.3 0.3 )
            ( 2.0 -0.3 0.3125 )
            ( 2.0 -0.3 0.325 )
            ( 2.0 -0.3 0.3375 )
            ( 2.0 -0.3 0.35 )
            ( 2.0 -0.3 0.3625 )
            ( 2.0 -0.3 0.375 )
            ( 2.0 -0.3 0.3875 )
            ( 2.0 -0.3 0.4 )
            ( 2.0 -0.3 0.4125 )
            ( 2.0 -0.3 0.425 )
            ( 2.0 -0.3 0.4375 )
            ( 2.0 -0.3 0.45 )
            ( 2.0 -0.3 0.4625 )
            ( 2.0 -0.3 0.475 )
            ( 2.0 -0.3 0.4875 )
            ( 2.0 -0.3 0.5 )
            ( 2.0 -0.3 0.5125 )
            ( 2.0 -0.3 0.525 )
            ( 2.0 -0.3 0.5375 )
            ( 2.0 -0.3 0.55 )
            ( 2.0 -0.3 0.5625 )
            ( 2.0 -0.3 0.575 )
            ( 2.0 -0.3 0.5875 )
            ( 2.0 -0.3 0.6 )
        );
    } 
);


// Surface sampling definition
//
// 1] patches are not triangulated by default
// 2] planes are always triangulated
// 3] iso-surfaces are always triangulated
surfaces
(
//     planeZ_4h
//     {
//         type            plane;    // always triangulated
//         // make plane relative to the coordinateSystem (Cartesian)
//         coordinateSystem
//         {
//             origin      (0 0 0);
//         }
//         basePoint       (0 0 0.8);
//         normalVector    (0 0 1);
//         interpolate     true;
//     }
//     planeX_9.5h
//     {
//         type            plane;    // always triangulated
//         // make plane relative to the coordinateSystem (Cartesian)
//         coordinateSystem
//         {
//             origin      (0 0 0);
//         }
//         basePoint       (1.9 0 0);
//         normalVector    (1 0 0);
//         interpolate     true;
//     }
//     planeX_19h
//     {
//         type            plane;    // always triangulated
//         // make plane relative to the coordinateSystem (Cartesian)
//         coordinateSystem
//         {
//             origin      (0 0 0);
//         }
//         basePoint       (3.8 0 0);
//         normalVector    (1 0 0);
//         interpolate     true;
//     }
);


// *********************************************************************** //
