/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (1 0 0);

boundaryField
{

    inlet
    {
        type            filteredNoiseInflowGenerator;
        value           uniform ( 0 0 0 ); // placeholder
        //perturb 1e-6; //optional: used for the interpolation. Change this value if there are artifacts on the inlet patch
        
        //spatial correlations:
        //correlationShape exp;
        //correlationShape doubleExp;
        correlationShape gaussian;
        
        //Virtual grid has the size of the smalles inlet patch cell.
        //gridFactor 1.0; //optional: Use the gridFactor to scale the virtual grid size.
    }
    outlet
    {
        type            inletOutlet;
        inletValue      uniform (0 0 0);
        value           uniform (0 0 0);
    }
    front
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    heatedplate01
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    heatedplate02
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    heatedplate03
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    rear
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    top
    {
        type           symmetryPlane;
    }
    side1
    {
        type            cyclic;
    }
    side2
    {
        type            cyclic;
    }
}

// ************************************************************************* //
